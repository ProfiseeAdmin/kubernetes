sqlServer:
    name: "{SQL_ServerName}"
    databaseName: "{DatabaseName}"
    userName: "{SQL_UserName}"
    password: "{SQL_AuthPassword}"
profiseeRunTime:
    useLetsEncrypt: false
    adminAccount: "{SuperAdminEmail}"
    fileRepository:
        accountName: "{StorageAccountName}"
        userName: "Azure\\{StorageAccountName}"
        password: "{StorageAccountAccessKey}"
        logonType: "NewCredentials"
        location: "\\\\{StorageAccountName}.file.core.windows.net\\files"
        fileShareName: "files"
    externalDnsUrl: "https://{DNSFQDN}"
    externalDnsName: "{DNSFQDN}"
    webAppName: "{WebApp}"
    deployIngressRule: true
    isPaaS: false
    oidc:
        name: "Azure Active Directory"
        authority: "{OIDCTenantID}"
        clientId: "{OIDCClientID}"
        clientSecret: "{OIDCClientSecret}"
        usernameClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
        userIdClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
        firstNameClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
        lastNameClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"
        emailClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
    clusterNodeCount: "{PodCount}"
clusterNode:
    limits:
      cpu: "{CPU}"
      memory: "{RAM}G"
    requests:
      cpu: 1
      memory: 1000M
image:
    registry: "profisee.azurecr.io"
    repository: "profiseeplatform"
    tag: "2021r3.0.saas"
    auth: | #Leave for now but will be supplied per customer in near future
        {
           "auths":{
              "profisee.azurecr.io":{
                 "username":"$ACRUSER",
                 "password":"$ACRPASSWORD",
                 "email":"support@profisee.com",
                 "auth":"$ACRAUTH"
              }
           }
        }
licenseFileData: "hlYM/TzY4SQ48Ry5BwZZga7Yje7f6oR6gbkn6SXkfqTQEhzk1+3twXB7bL7m8gWg"
preInitScriptData: Cg==
postInitScriptData: {postInitScriptData}
oidcFileData: |
    {
      "tenant_id": "{OIDCTenantID}",
      "client_id": "{OIDCClientID}",
      "client_secret": "{OIDCClientSecret}"
    }
tlsCert: |
    NA
tlsKey: |
    NA
cloud:
    azure:
      isProvider: true
      useKeyVault: false
      keyVault:
        identity:
          clientId: ""
          resourceId: ""
        secrets:
          sqlUserName: ""
          sqlPassword: ""
          tlsCertificate: ""
          license: ""
        name: ""
        resourceGroup: ""
        subscriptionId: ""
        tenantId: ""
        clusterClientId: ""
      useManagedIdentity: true
      managedIdentity:
        name: ""
        clientId: ""
        resourceId: ""
      purview:
        clientId: "{Purview_ClientID}"
        clientSecret: "{Purview_ClientSecret}"
        tenantId: "{Purview_TenantID}"
        url: "{Purview_URL}"
        collectionId: "{Purview_CollectionID}"
    aws:
      isProvider: false
    google:
      isProvider: false